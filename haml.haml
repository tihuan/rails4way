!!!

/ HTML

<! DOCTYPE html>

#content
  .entry.feature
    %h3.title Haml
    %p.body Lorem Ipsum

/ HTML

<div id='content'>
  <div class='entry featured'>
    <h3 class='title'>Haml</h3>
    <p class='body'>Lorem Ipsum...</p>
  </div>
</div>

/ long-hand attributes to chain classes

%article.featured{ class: @article.visibility } ...

<article class='feature visible'>...</article>

/  public comments and private comments

/  This is public comment
%h1 Comments

/ HTML
<!-- This is public comment -->
<h1>Comments</h1>

-# This is private comment
%h1 Comments

/ HTML
<h1>Comments</h1>

/ Evaluating Ruby Code

%p= %w(foo bar).join(' ')

/ HTML

<p>foo bar</p>

- if flash.notice
  .notice= flash.notice

/ Lines of Ruby code can be broken up over multiple lines
/ as long as each but the last line ends with a comma ,
/  However, it's discouraged to use multiple line Ruby inside HAML. Recommend to use presenter, decorator, and helper to make the views clean.

= image_tag post.mage_url,
  class: 'featured-image'

  / Interpolation

  %p By: #{post.author_name}
  %p= "By: #{post.author_name}"

  / Object Reference

  / [] is similar to div_for and content_tag_for
  %li[@post]
    %h4= @post.title
    = @post.excerpt

  / HTML

  <li class='post' id='post_1'>...</li>

/ list_of will iterate result of the block into <li> elements

%ul
  = list_of [1,2,3] do |item|
    Number #{item}

  / HTML

  <ul>
    <li>Number 1</li>
    <li>Number 2</li>
    <li>Number 3</li>
  </ul>

/ Use :markdown, :coffee to compile filtered text into corresponding language

:markdown
  # The Rails 4 Way

  Some awesome **Rails** related content.

/ HTML

<h1>The Rails 4 Way</h1>
<p>Some awesome <strong>Rails</strong> related content</p>
